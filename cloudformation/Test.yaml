AWSTemplateFormatVersion: "2010-09-09"
Description: Test

Parameters:
  StageName:
    Type: String
    Default: v1
  KeyName:
    Type: String
    Default: apiKey

Resources:
  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile:
          Fn::Join:
            - "\n"
            - - "'use strict';"
              - ""
              - "// Greeter Lambda"
              - "exports.handler = (event, context, callback) => {"
              - "  console.log('Event:', JSON.stringify(event));"
              - "  const name = event.name || 'World';"
              - "  const response = {greeting: `Hello, ${name}!`};"
              - "  callback(null, response);"
              - "};"
      Description: "A greeting function"
      FunctionName: "Lambda"
      Handler: "index.handler"
      Role:
        Fn::GetAtt: ["LambdaExecutionRole", "Arn"]
      Runtime: "nodejs18.x"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: ["lambda.amazonaws.com"]
            Action: ["sts:AssumeRole"]
      ManagedPolicyArns:
        ["arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"]

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:invokeFunction"
      FunctionName:
        Fn::GetAtt: ["Lambda", "Arn"]
      Principal: "apigateway.amazonaws.com"
      SourceArn:
        Fn::Join:
          - ""
          - - "arn:aws:execute-api:"
            - Ref: "AWS::Region"
            - ":"
            - Ref: "AWS::AccountId"
            - ":"
            - Ref: "APIGateway"
            - "/*"

  APIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: AI Album APIs
      Description: APIs for AI Album
      ApiKeySourceType: HEADER
      Body:
        swagger: "2.0"
        info:
          title: AI Photo Search
          description: "AI Photo Search application, built during the Cloud and Big Data course at Columbia University."
          version: 1.0.0
        schemes:
          - https
        basePath: /v1
        produces:
          - application/json
        paths:
          /search:
            get:
              summary: photo search method
              description: |
                This API takes in a search query as a query parameter and returns zero or more photos that match the search query.
              operationId: searchPhotos
              parameters:
                - in: query
                  name: q
                  schema:
                    type: string
                  description: the string to be searched
              produces:
                - application/json
              responses:
                "200":
                  description: search results
                  schema:
                    $ref: "#/definitions/SearchResponse"
                "403":
                  description: Unauthorized
                  schema:
                    $ref: "#/definitions/Error"
                "500":
                  description: Unexpected error
                  schema:
                    $ref: "#/definitions/Error"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                httpMethod: POST
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda.Arn}/invocations"
                type: aws
          /photos:
            put:
              summary: photo upload method
              description: |
                This API takes in the multi-part body sent to it (ex. a photo) and uploads it to an S3 bucket.
              operationId: uploadPhoto
              consumes:
                - image/png
                - image/jpg
                - image/jpeg
              produces:
                - application/json
              responses:
                "200":
                  description: S3 PUT operation response
                  schema:
                    type: object
                "403":
                  description: Unauthorized
                  schema:
                    $ref: "#/definitions/Error"
                "500":
                  description: Unexpected error
                  schema:
                    $ref: "#/definitions/Error"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                httpMethod: POST
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Lambda.Arn}/invocations"
                type: aws
        definitions:
          SearchResponse:
            type: object
            properties:
              results:
                type: array
                items:
                  $ref: "#/definitions/Photo"
          Photo:
            type: object
            properties:
              url:
                type: string
              labels:
                type: array
                items:
                  type: string
          Error:
            type: object
            properties:
              code:
                type: integer
                format: int32
              message:
                type: string

  APIStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref APIGateway
      StageName: !Ref StageName

  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref APIGateway

  TestAPIUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn:
      - APIGateway
    Properties:
      ApiStages:
        - ApiId: !Ref APIGateway
          Stage: !Ref APIStage
      Description: To test usage plan and api key in REST API.
      Quota:
        Limit: 100
        Period: MONTH
      UsagePlanName: "test-usage-plan"

  TestApiAccessKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn:
      - APIGateway
    Properties:
      Name: !Ref KeyName
      Description: To test usage plan and api key in REST API.
      Enabled: true

  LinkUsagePlanApiKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref TestApiAccessKey
      KeyType: API_KEY
      UsagePlanId: !Ref TestAPIUsagePlan

Outputs:
  ApiRootUrl:
    Description: Root Url of the API
    Value: !Sub "https://${APIGateway}.execute-api.${AWS::Region}.amazonaws.com/${StageName}"
